<project name='VersionOne.Provisioning' default='compile'>
	<property name='project.name' value='${project::get-name()}' />
	<property name='publish.dir' value='builds' unless="${property::exists('publish.dir')}" />
	<property name='project.prefix' value='VersionOne.Provisioning'/>
	<property name='solution.filename' value='${project.prefix}.sln'/>
	<property name='test.project.name' value='${project.prefix}.Tests'/>

  <property name='ver.major' value='8' />
  <property name='ver.minor' value='3' />
  <property name='ver.major.minor' value='${ver.major}.${ver.minor}' />
  <property name='build.version' value='${ver.major.minor}' />

  <if test="${property::exists('ver.build')}">
    <property name='build.version' value='${ver.major.minor}.${ver.build}' />
    <if test="${property::exists('ver.revision') and int::parse(ver.revision) > 0}">
      <property name='build.version' value='${ver.major.minor}.${ver.build}.${ver.revision}' />
    </if>
  </if>

	<property name='temp.dir' value='temp' />

	<property name='build.config' value='Debug' />
	<target name='debug' description='Select Debug build'>
		<property name='build.config' value='Debug' />
	</target>
	<target name='release' description='Select Release build'>
		<property name='build.config' value='Release' />
	</target>
  
	<property name="doc.output.dir" value="doc"/>

  <target name='build-release'>
    <call target='release' />
    <call target='build-common' />
  </target>

  <target name='build-debug'>
    <call target='debug' />
    <call target='build-common' />
  </target>

  <target name='build-common'>
    <call target='setversion' />
    <call target='cleanclean' />
    <call target='cleanscc' />
    <call target='copyright' />
    <call target='compile' />
    <call target='test' />
    <call target='gendoc' />
    <call target='package' />
    <call target='publish' />
  </target>

  <target name='setversion' description='Update assembly version numbers in source code'>
    <attrib normal='true'>
      <fileset>
        <include name='**\AssemblyInfo.cs' />
        <include name='**\AssemblyInfoCommon.cs' />
      </fileset>
    </attrib>
    <!--
    TODO restore when committing
		<update-version build='${ver.build}' revision='${ver.revision}' >
			<fileset>
				<include name='**\AssemblyInfo.cs' />
				<include name='**\AssemblyInfoCommon.cs' />
			</fileset>
		</update-version>
    -->
  </target>

  <target name='cleanscc' description='Remove source control bindings from source code'>
    <!--
    TODO
		<exec program='Common\VersionOne.CleanSCC.exe'>
			<arg value='.' />
		</exec>
		-->
  </target>

  <target name='copyright' description='Add copyright to top of each source file'>
    <!--
    TODO
		<exec program='Common\Tools\HeaderWriter.exe' />
    -->
  </target>


  <!--==COMPILE==-->
	<target name='compile' description='Compile all projects'>
    <echo message='Building the project...'/>
    <msbuild project='${solution.filename}' target='BuildSolution'>
      <property name='Configuration' value='${build.config}'/>
    </msbuild>
    
    <!--
    <copy todir='${bin.dir}' overwrite='true'>
      <fileset basedir='Common'>
        <include name='VersionOne.SDK.APIClient.dll.config'/>
      </fileset>
    </copy>
    -->
  </target>

	<target name='compile.clean'>
		<delete failonerror='false'>
			<fileset>
				<include name='*\obj\${build.config}\**' />
				<include name='*\obj\${build.config}' />
				<include name='*\bin\${build.config}\**' />
				<include name='*\bin\${build.config}' />
				<include name='*\${build.config}\**' />
				<include name='*\${build.config}\' />
			</fileset>
		</delete>
	</target>

	<target name='compile.cleanclean'>
		<delete failonerror='false'>
			<fileset>
				<include name='*\obj\**' />
				<include name='*\obj' />
				<include name='*\bin\**' />
				<include name='*\bin' />
        		<include name='*\${build.config}\**' />
        		<include name='*\${build.config}' />
			</fileset>
		</delete>
	</target>
	<!--== GENDOC ==-->
	<target name='gendoc'>
    <!--
    TODO
		<call target='gendoc.init'/>
		<call target='gendoc.index'/>
		<call target='gendoc.content'/>
    -->
	</target>
	
	<target name='gendoc.init'>
		<property name='doc.source.dir' value='DocSource'/>
		<mkdir dir='${doc.output.dir}\Common' />
		<copy todir='${doc.output.dir}\Common' file='${doc.source.dir}\Common\v1integration.css' />
	</target>
	
	<target name='gendoc.index' description='Generate Documentation' depends='gendoc.init'>
		<foreach item='File' property='filename'>
			<in>
				<items>
					<include name='${doc.source.dir}\*.xml' />
				</items>
			</in>		
			<do>
				<property name='filename.noext' value="${path::get-file-name-without-extension(filename)}"/>
				<exec workingdir='${doc.source.dir}' basedir='Common\docbook\xsltproc\' program='xsltproc.exe' commandline='-o ..\${doc.output.dir}\${filename.noext}.html Common\index.xsl ${filename}' />					
			</do>
		</foreach>
	</target>
	
	<target name='gendoc.olink' description='Create target databases for the olink command' depends='gendoc.init'>
		<property name='collect.xref.targets' value='only'/>
		<call target='gendoc.content.base'/>
	</target>
	
	<target name='gendoc.content' description='Generate documentation for the content pages' depends='gendoc.init,gendoc.olink'>
		<property name='collect.xref.targets' value='no'/>	
		<call target='gendoc.content.base'/>
	</target>
	
	<target name='gendoc.content.base' depends='gendoc.init'>
		<property name='foldername' value='${doc.source.dir}\VSAddin'/>
		<property name='content.doc.output.dir' value='${doc.output.dir}\${path::get-file-name(foldername)}'/>
		<mkdir dir='${content.doc.output.dir}' />
		<foreach item='File' property='filename'>
			<in>
				<items>
					<include name='${foldername}/*.xml' />
				</items>
			</in>
			<do>
				<property name='filename.noext' value="${path::get-file-name-without-extension(filename)}"/>
				<exec workingdir='${foldername}' basedir='Common\docbook\xsltproc\' program='xsltproc.exe' commandline='-o ..\..\${content.doc.output.dir}\${filename.noext}.html --stringparam current.docid ${filename.noext} --stringparam target.database.document ../Common/olinkdb.xml --stringparam collect.xref.targets ${collect.xref.targets} --stringparam targets.filename ../Common/${filename.noext}.db ..\Common\v1integration.xsl ${filename}'  />
			</do>
		</foreach>
		<if test="${collect.xref.targets == 'no'}">
			<copy todir='${content.doc.output.dir}' overwrite='true'>
				<fileset basedir='${foldername}'>
					<include name='*.JPG'/>				
					<include name='*.GIF'/>				
				</fileset>
			</copy>		
		</if>
	</target>	
	
	<target name='gendoc.clean'>
		<delete dir='${doc.output.dir}' if='${directory::exists(doc.output.dir)}' failonerror='false' />
	</target>
	<!--==PACKAGE==-->	
	<target name='package' description='Create final package' depends='package.clean'>
		<call target='package.source' />
    <call target='package.zip' />
	</target>

	<target name='package.clean' depends='package.source.clean, package.zip.clean' />

  <target name='package.zip.init'>
    <property name='package.zip.zipfile' value='${temp.dir}\${project::get-name()}.${build.version}.zip' />
    <mkdir dir='${temp.dir}' unless='${directory::exists(temp.dir)}'  />
  </target>
  
  <target name='package.zip' depends='package.zip.init' description="Pack installer files">
    <zip zipfile='${package.zip.zipfile}' >
      <fileset basedir='${addin.project.dir}\bin\${build.config}'>
        <include name='**\*.vsix' />
      </fileset>
    </zip>
  </target>

	<target name='package.source.init'>
		<property name='package.source.zipfile' value='${temp.dir}\${project::get-name()}-Source.${build.version}.zip' />
    <mkdir dir='${temp.dir}' unless='${directory::exists(temp.dir)}'  />
	</target>

  <target name='package.zip.clean' depends='package.zip.init'>
    <delete file='${package.zip.zipfile}' if='${file::exists(package.zip.zipfile)}' failonerror='false' />
  </target>

	<target name='package.source' depends='package.source.init'>
		<zip zipfile='${package.source.zipfile}'>
			<fileset>
				<include name='**\*.cs' />

				<include name='**\*.resx' />

				<include name='**\*.bmp' />
				<include name='**\*.ico' />
				<include name='**\*.gif' />
				<include name='**\*.cur' />
				<include name='**\loading_icon' />

				<include name='**\*.doc' />
				<include name='**\*.pdf' />
				<include name='**\*.rtf' />
				<include name='**\*.txt' />

				<include name='**\*.xml' />
				<include name='**\*.config' />

				<include name='**\*.csproj' />
				<include name='**\*.vcproj' />
				<include name='**\*.sln' />

				<include name='*.Public.build' />
				<include name='**\*.targets' />
				<include name='*.inc' />
				<include name='Common\**\*.dll' />

				<exclude name='_old\**' />
				<exclude name='Common\docbook\**' />
				<exclude name='Common\Tools\*' />
				<exclude name='Common\SigningKey\*.*'/>
				<exclude name='**\*.snk'/>
				<exclude name='**\bin\**' />
				<exclude name='DocSource\**'/>
				<exclude name='Documentation\**'/>
				<exclude name='_ReSharper*\**'/>
			</fileset>
		</zip>
	</target>

	<target name='package.source.clean' depends='package.source.init'>
		<delete file='${package.source.zipfile}' if='${file::exists(package.source.zipfile)}' failonerror='false' />
	</target>
  
	<target name='publish' depends='package.source.init, package.zip.init' description='Copy final package to Builds folder'>
		<copy todir='${publish.dir}' flatten='true' overwrite='true'>
			<fileset>
				<include name='${package.source.zipfile}' />
        <include name='${package.zip.zipfile}'/>
			</fileset>
		</copy>
	</target>

	<target name='clean' description='Delete configuration-specific build results' depends='compile.clean package.clean'>
	</target>

	<target name='cleanclean' description='Delete all build results' depends='compile.cleanclean package.clean'>
		<delete dir='${temp.dir}' if='${directory::exists(temp.dir)}' failonerror='false' />
	</target>

  <target name='test'>
    <!--
    TODO
    <nunit2>
      <formatter type="Xml" />
      <test assemblyname="${test.project.name}/bin/${build.config}/${test.project.name}.dll" /> 
    </nunit2>
    -->
  </target>
</project>